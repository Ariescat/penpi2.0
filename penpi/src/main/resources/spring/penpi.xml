<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:elasticsearch="http://www.springframework.org/schema/data/elasticsearch"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
				        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
				        http://www.springframework.org/schema/context
				        http://www.springframework.org/schema/context/spring-context-4.2.xsd
				        http://www.springframework.org/schema/tx
				        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
				        http://www.springframework.org/schema/task
         				http://www.springframework.org/schema/task/spring-task-4.3.xsd
				        http://www.springframework.org/schema/aop 
				        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
				        http://www.springframework.org/schema/mvc 
				        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
				        http://www.springframework.org/schema/data/jpa  
         				http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
						http://www.springframework.org/schema/data/elasticsearch
						http://www.springframework.org/schema/data/elasticsearch/spring-elasticsearch-1.0.xsd
						http://www.springframework.org/schema/cache
						http://www.springframework.org/schema/cache/spring-cache-4.3.xsd">

    <!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:appConfig.local.properties</value>
            </list>
        </property>
    </bean>

	<!-- 国际化,并且可以批定文件编码 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>classpath:i18n/messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>
    
	<!-- 开启IOC注解扫描 自动搜索@Component , @Controller , @Service , @Repository等标注的类 -->
    <context:component-scan base-package="org.penpi.**.aop" />
	<context:component-scan base-package="org.penpi.**.helper" />
	<context:component-scan base-package="org.penpi.**.controller" />
    <context:component-scan base-package="org.penpi.**.service" />
    <context:component-scan base-package="org.penpi.**.queue" />
    <context:component-scan base-package="org.penpi.**.processor" />

	<!-- 处理@Aspect的 -->
	<!-- proxy-target-class默认false,而事务管理时需使用AspectJ的支持,否则会报错 ***but was actually of type [com.sun.proxy.$Proxy18] -->
	<aop:aspectj-autoproxy  proxy-target-class="true"/>
	
    <task:executor id="executor" pool-size="${app.thread.executor.poolsize:2}" /><!-- 处理@Async的  -->
    <task:scheduler id="scheduler" pool-size="${app.thread.scheduler.poolsize:2}" /><!-- 处理@Scheduled的  -->
    <task:annotation-driven executor="executor" scheduler="scheduler" />

	<!-- SpringMVC配置 start -->
	<!-- 开启MVC注解扫描 -->
	<mvc:annotation-driven />
	
	<!--  登录拦截器 -->
	<mvc:interceptors>
		 <!-- 多个拦截器，顺序执行 -->  
		<mvc:interceptor>
			<mvc:mapping path="/admin/**" />
			<bean class="org.penpi.core.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors> 

	<!-- 对静态资源文件的访问，将无法mapping到Controller的path交给default servlet handler处理 -->
	<!-- <mvc:default-servlet-handler /> -->
	
	<!-- <mvc:resources mapping="/upload/**" location="/upload/"/> -->
    <!-- <mvc:resources mapping="/page/**" location="/page/"/> -->
    
 	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize">
			<value>52428800</value>  <!--50M-->
		</property>
	</bean>

	<!-- Mapping exception to the handler view -->
	<bean id="exceptionResolver" class="org.penpi.core.commons.exception.BusinessExceptionResolver">
		<property name="uriExceptionStatusMap" ref="uriExceptionStatusMap" />
	</bean>
	<!-- 状态码重定义map，更换时请添加例如 <entry key="/api" value="200"/> -->
	<bean id="uriExceptionStatusMap" class="org.springframework.beans.factory.config.MapFactoryBean">
		<property name="sourceMap">
			<map>
				<entry key="/app" value="200" />
			</map>
		</property>
	</bean>
	
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/view/" />
					<property name="suffix" value=".html" />
				</bean>
			</list>
		</property>
		<!-- 用于将对象转换为 JSON -->
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
			</list>
		</property>
	</bean>
	<!-- SpringMVC配置 end -->
	
	
	<!-- cache start -->
	<bean id="ehcacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache-setting.xml"></property>
        <!-- 定义了EHCache CacheManager是应该共享的（作为VM级的单例）还是独立的（通常是应用程序中的本地）。默认是'false'，创建一个独立的实例。 -->
        <property name="shared" value="true"/>
    </bean>
    
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
         <property name="cacheManager" ref="ehcacheManagerFactory" />
    </bean>
	<bean id="simpleKeyGenerator" class="org.springframework.cache.interceptor.SimpleKeyGenerator"/>
    <cache:annotation-driven cache-manager="ehcacheManager" key-generator="simpleKeyGenerator"/>
    <!-- cache end -->
    

	<!-- 数据库层配置 start -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${app.dataSource.driver}" />
		<property name="url" value="${app.dataSource.driverUrl}" />
		<property name="username" value="${app.dataSource.username}" />
		<property name="password" value="${app.dataSource.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" /> 
		<property name="maxActive" value="10" />
	</bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<!-- <property name="persistenceUnitName" value="penpiUnit" /> -->
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="org.penpi.**.entity" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="database" value="MYSQL" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">${app.showSql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${app.initMode}</prop>
				<prop key="hibernate.dialect">${app.hibernate.dialect}</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器 -->
	<!-- <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean> -->
	
	<!-- 把jpa事务和[cache事务及索引事务]同步起来 -->
	<bean id="transactionManager" class="org.penpi.core.commons.transaction.TransactionManager">
		<property name="ehcacheManager" ref="ehcacheManagerFactory"/>
		<property name="transactionTimeout" value="${app.ehcache.transactionTimeout:300}"/><!-- 默认Ehcache事务300秒 -->
        <property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 配置Spring Data JPA扫描目录 -->
	<jpa:repositories base-package="org.penpi.**.repository" entity-manager-factory-ref="entityManagerFactory" transaction-manager-ref="transactionManager" />

	<!-- 启用 annotation事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 数据库层配置 end -->


	<!-- spring-data的ElasticSearch集成 -->
	<elasticsearch:repositories base-package="org.**.search" />

	<!-- 远程机器 -->
	<!-- <elasticsearch:transport-client id="client" cluster-nodes="localhost:9300" cluster-name="elasticsearch" /> -->

	<!-- embed模式client，数据采用UUID的方式每运行一次重置一次数据 -->
	<elasticsearch:node-client id="client" local="true" http-enabled="true" 
		cluster-name="#{T(org.penpi.core.commons.utils.ESPathUtil).cleanAndRandomCluster()}" 
		path-data="#{T(org.penpi.core.commons.utils.ESPathUtil).getDataDir()}" 
		path-home="#{T(org.penpi.core.commons.utils.ESPathUtil).getHomeDir()}" />
		
	<bean name="elasticsearchTemplate" class="org.springframework.data.elasticsearch.core.ElasticsearchTemplate">
		<constructor-arg name="client" ref="client" />
	</bean>
    
</beans>